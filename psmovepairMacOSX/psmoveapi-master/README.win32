
       Building and running the PS Move API on a legacy operating system
       =================================================================

We usually build PS Move API for Windows on Linux via cross-compliation, as
we don't run Windows for day-to-day work. For cross-compiling the PS Move API
for Windows on Linux, you can use the following script:

    contrib/cross-compile-mingw64


Please take into account that nobody has yet managed to make Bluetooth pairing
work reliably on Windows (it works reliably on both Mac OS X and Linux). If you
plan to do serious development, it's time to switch to Mac OS X or Linux. As an
alternative, you can use a Linux host for Bluetooth communcation, and export
the controller via "moved" to the Windows host. This setup has reliable pairing,
and you can still develop and build your applications in Windows if you have to.


Requirements
------------

- MinGW
  http://mingw-w64.sourceforge.net/
- CMake
  http://www.cmake.org/cmake/resources/software.html
- OpenCV
  http://sourceforge.net/projects/opencvlibrary/files/opencv-win/
- Git
  http://code.google.com/p/msysgit/
- CL Eye Driver (if you plan to use the PS Eye camera)
  http://codelaboratories.com/get/cl-eye-driver/

Optional dependency:

- CLEyeSDK
  http://codelaboratories.com/get/cl-eye-sdk/



IMPORTANT: Get the right MinGW version!

 -> "Regular" MinGW might not be able to build the PS Move API, as we are
    using some features that are only included in MinGW-w64.

 -> Get "MinGW-w64" instead. Despite its name, it also works for 32-bit
    systems (and you probably have to/want to build PS Move API as 32-bit
    library on Windows, anyway. This is also what we use, both for cross-
    compiling it on Linux, and for building it directly on Windows.

 -> The build has been successfully tested on Windows XP, Windows 7,
    and Windows 8 using MinGW-w64 version 4.9.1. To get it, you can either
    A) use the online installer or B) download the archive directly for
    manual setup:

    A) Get the online installer at http://sourceforge.net/projects/mingw-w64/

       Run the installer using these setup settings:

           Version:        4.9.1
           Architecture:   i686 or x86_64
           Threads:        posix
           Exception:      sjlj or seh
           Build revision: 1

    B) For 64-bit Windows, get the archive at
       http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.1/threads-posix/sjlj/

       For 32-bit Windows, get the archive at
       http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.9.1/threads-posix/sjlj/

       Extract the archive (using 7-Zip) and add the path to its "bin" subdirectory to the
       PATH environment variable like so, for instance:

           set PATH=C:\mingw32\bin;%PATH%



1. build and configure OpenCV with cmake
	:: you may skip to build OpenCV on your own, however i had no luck
	:: the binary distribution did not work on my system
	cd <where you extracted opencv>
	mkdir build
	cd build
	cmake .. -G "MinGW Makefiles"
	mingw32-make
	:: now go for a coffe-break

2. Get you clone of the psmoveapi
	git clone git://github.com/thp/psmoveapi.git
	cd psmoveapi

3. Init and update the submodules
	git submodule init
	git submodule update

4.  make OpenCV known to your system and the cmake toolchain
	set OpenCV_DIR=<the path where you extracted opencv>
	set PATH=%PATH%;%OpenCV_DIR%\build\bin

    You can also build opencv in a folder "opencv" inside the
    source directory (opencv/build/install) and then use the
    CMake option "PSMOVE_USE_LOCAL_OPENCV" to link against
    OpenCV statically from this checkout / build directory.

5. prepare a new build with cmake for the psmoveapi
	mkdir build
	cd build
	cmake .. -G "MinGW Makefiles"

        Alternatively, if you want to use the CL Eye SDK:
	cmake .. -G "MinGW Makefiles" -DPSMOVE_USE_CL_EYE_SDK=ON

6. finally build
	mingw32-make

7. start one of the desired test applications

